#!/usr/bin/env bash

# Determine if stdout is a terminal...
if test -t 1; then
    # Determine if colors are supported...
    ncolors=$(tput colors)

    if test -n "$ncolors" && test "$ncolors" -ge 8; then
        BOLD="$(tput bold)"
        RED="$(tput setaf 1)"
        GREEN="$(tput setaf 2)"
        YELLOW="$(tput setaf 3)"
        NC="$(tput sgr0)"
    fi
fi

# Function that prints the available commands...
function display_help {
    echo "dock: Docker Helper Script"
    echo
    echo "${YELLOW}Usage:${NC}" >&2
    echo "  ./dock COMMAND [options] [arguments]"
    echo
    echo "Unknown commands are passed to the docker-compose binary."
    echo
    echo "${YELLOW}Certificate's Commands:${NC}"
    echo "  ${BOLD}To generate certificates for domains:${NC}"
    echo "  ${GREEN}./dock certs [-n cert_name] [-d domain_name_1] [-d domain_name_2] ...${NC}"
    echo "  eg: ./dock certs -n my_app -d \"my-app.localhost\" -d \"*.my-app.localhost\"${NC}"
    echo
    echo "  ${BOLD}To apply generated certificates:${NC}"
    echo "  ${GREEN}./dock certs:apply${NC}"
    echo
    echo "${YELLOW}docker-compose Commands:${NC}"
    echo "  ${GREEN}./dock up${NC}          Start the application (runs in the background)"
    echo "  ${GREEN}./dock down${NC}        Stop the application"
    echo "  ${GREEN}./dock [commands]${NC}  Supports all docker-compose commands"
    echo
    echo "${YELLOW}ssh Commands:${NC}"
    echo "  ${GREEN}./dock ssh service-name${NC} Start a shell session within the application container (as root user)"
    echo "  ${GREEN}./dock ssh user@service-name${NC} Start a shell session within the application container (as user supplied)"

    exit 1
}

# Proxy the "help" command...
if [ $# -gt 0 ]; then
    if [ "$1" == "help" ] || [ "$1" == "-h" ] || [ "$1" == "-help" ] || [ "$1" == "--help" ]; then
        display_help
    fi
else
    display_help
fi

# Source the ".env" file so environment variables are available...
if [ -f ./.env ]; then
    source ./.env
else
    echo "${BOLD}${RED}No .env file found.${NC}" >&2
    exit 1
fi

# mkcert certificates
if [ "$1" == "certs" ]; then
    shift 1

    # Check if mkcert is installed
    if ! mkcert -help > /dev/null 2>&1; then
        echo "${BOLD}${RED}'mkcert' is not installed. Refer: https://github.com/FiloSottile/mkcert"
        exit 1
    fi

    # Initialize variables
    name=""
    domains=()

    # Parse command-line options
    while getopts ":n:d:" option; do
      case $option in
        n) name="$OPTARG" ;;
        d) domains+=("$OPTARG") ;;
        *) echo "${BOLD}${GREEN}Usage: ./dock certs [-n cert_name] [-d domain_name_1] [-d domain_name_2]"
           exit 1;;
      esac
    done

    # Validate inputs
    if [ -z "$name" ]; then
        echo "${BOLD}${RED}Certificate name is required."
        echo "${BOLD}${GREEN}Usage: ./dock certs [-n cert_name] [-d domain_name_1] [-d domain_name_2]"
        exit 1
    fi

    if [ ${#domains[@]} -eq 0 ]; then
        echo "${BOLD}${RED}Domains are required."
        echo "${BOLD}${GREEN}Usage: ./dock certs [-n cert_name] [-d domain_name_1] [-d domain_name_2]"
        exit 1
    fi

    # Create the directory if not present
    certs_dir="./data/certs/${name}"
    if [ ! -d "$certs_dir" ]; then
        mkdir -p "$certs_dir"
    fi

    IFS=' ';
    mkcert -cert-file "${certs_dir}/cert.pem" -key-file "${certs_dir}/key.pem" "${domains[@]}"

    echo "${BOLD}${GREEN}Run following command to apply the certificates:"
    echo "${BOLD}${YELLOW}./dock certs:apply"

    exit 0
fi

if [ "$1" == "certs:apply" ]; then
    # Define the directory containing certificates
    certs_dir="./data/certs"

    # Define the output YAML file
    output_yaml="./data/certs/certs.yaml"

    YAML="tls: { certificates: [%s]}"

    CERT=()

    for domain_dir in "$certs_dir"/*
    do
      domain=$(basename "$domain_dir")
      CERT+=("{\"certFile\": \"/etc/certs/${domain}/cert.pem\", \"keyFile\": \"/etc/certs/${domain}/key.pem\"}")
    done

    YAML=$(printf "${YAML}" "$(IFS=,; echo "${CERT[*]}")")

    echo "$YAML" > ${output_yaml}

    exit  0
fi

if [[ -z "${DOCKER_COMPOSE}" ]]; then
    echo "${BOLD}${RED}DOCKER_COMPOSE not set in .env file.${NC}" >&2

    exit 1
fi

if ! docker info > /dev/null 2>&1; then
    echo "${BOLD}${RED}Docker is not running.${NC}" >&2

    exit 1
fi

if [ $# -eq 0 ]; then
    ${DOCKER_COMPOSE} ps

    exit 0
fi

# docker compose up
if [ "$1" == "up" ]; then
    shift 1

    if [ $# -eq 0 ]
      then
        read -p "Do you really want to start all services? [y/n] " -n 1 -r
        if [[ $REPLY =~ ^[Yy]$ ]]; then
            ${DOCKER_COMPOSE} up -d --remove-orphans --build
        fi
    else
        ${DOCKER_COMPOSE} up -d --remove-orphans --build "$@"
    fi

    exit 0
fi

# docker compose down
if [ "$1" == "down" ]; then
    ${DOCKER_COMPOSE} down

    exit 0
fi

# enter into the docker container
if [ "$1" == "ssh" ]; then
    shift 1

    if [ ! -z $1 ]; then
        arrIN=(${1//@/ })
        sshUser=${arrIN[0]}
        sshServer=${arrIN[1]}

        sshService=$sshUser
        if [ ! -z $sshServer ]; then
            sshUserOption="-u $sshUser"
            sshService=$sshServer
        fi

        ${DOCKER_COMPOSE} exec $sshUserOption $sshService sh

        exit 0
    fi

    echo "${BOLD}${RED}Please specify docker service name as 'user@service-name'.${NC}" >&2

    exit 0
fi

# To restores db dump
if [ "$1" == "postgres:restore" ]; then
    shift 1

    ${DOCKER_COMPOSE} exec -T "$RESTORE_POSTGRES" psql -U "$POSTGRES_ROOT_USER" -d "$RESTORE_DB_NAME" -w <"$@"

    exit 0
fi

# To restores db dump
if [ "$1" == "mysql:restore" ]; then
    shift 1

    ${DOCKER_COMPOSE} exec -T "$RESTORE_MYSQL" mysql -u "$MYSQL_ROOT_USER" "$RESTORE_DB_NAME" <"$@"

    exit 0
fi

# Pass unknown commands to the "docker compose" binary...
${DOCKER_COMPOSE} "$@"

exit 0
